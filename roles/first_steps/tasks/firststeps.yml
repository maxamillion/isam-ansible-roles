---
# task file for ISAM appliance first steps
#
#     accept service agreements
#     set up LMI FIPS
#     restart LMI
#     change password
#
# accept service agreements
- name: Accept Service Agreements
  ibm.isam.isam:
    appliance: "{{ inventory_hostname }}"
    username: admin
    password: admin
    action: ibmsecurity.isam.base.service_agreement.set

- name: Get Last Boot Timestamp
  ibm.isam.isam:
    appliance: "{{ inventory_hostname }}"
    username: admin
    password: admin
    action: ibmsecurity.isam.base.firmware.get
  check_mode: no
  register: ret_obj

- name: Extract Last Boot Timestamp
  set_fact:
    last_boot: "{{ ret_obj.data[0].last_boot }}"

# set up LMI FIPS
- name: Setup FIPS Mode
  ibm.isam.isam:
    appliance: "{{ inventory_hostname }}"
    username: admin
    password: admin
    action: ibmsecurity.isam.base.fips.set
    isamapi:
      fipsEnabled: "{{ FIPS_cfg.fipsEnabled }}"
      tlsv10Enabled: "{{ FIPS_cfg.tlsv10Enabled }}"
      tlsv11Enabled: "{{ FIPS_cfg.tlsv11Enabled }}"
  register: ret_obj
  when: first_steps_fips
- debug: var=ret_obj

# Restart after FIPS if needed
- name: Restart after enabling FIPS
  ibm.isam.isam:
      appliance: "{{ inventory_hostname }}"
      username: admin
      password: admin
      action: ibmsecurity.isam.base.fips.restart
  when:
    - first_steps_fips
    - ret_obj.data.reboot is defined
    - ret_obj.data.reboot

- name: Pause for Reboot {{ fips_restart_wait_time }}mins
  pause:
    minutes: "{{ fips_restart_wait_time }}"
  when:
    - first_steps_fips
    - ret_obj.data.reboot is defined
    - ret_obj.data.reboot

# Make sure system restarted
- name: Check FIPS settings for System Online Status
  ibm.isam.isam:
    appliance: "{{ inventory_hostname }}"
    username: admin
    password: admin
    action: ibmsecurity.isam.base.firmware.get
  register: result
  retries: 5
  delay: 30
  ignore_errors: true
  until: result.rc == 0 and (result.data[0].last_boot != last_boot)
  when:
    - first_steps_fips
    - ret_obj.data.reboot is defined
    - ret_obj.data.reboot

# Complete the appliance set up
- name: Complete Appliance Setup
  ibm.isam.isam:
    appliance: "{{ inventory_hostname }}"
    username: admin
    password: admin
    action: ibmsecurity.isam.base.setup_complete.set
  register: ret_obj
- debug: var=ret_obj

# Change password
- name: Change password for admin user
  ibm.isam.isam:
      appliance: "{{ inventory_hostname }}"
      password: "admin"
      action: ibmsecurity.isam.base.admin.set_pw
      isamapi:
          'oldPassword': 'admin'
          'newPassword': "{{ password }}"
          'sessionTimeout': "{{ lmi_session_timeout }}"
  when: first_steps_admin_pwd

- name: Get LMI Last Restart Timestamp
  ibm.isam.isam:
    appliance: "{{ inventory_hostname }}"
    username:  "{{ username }}"
    password:  "{{ password }}"
    lmi_port:  "{{ lmi_port }}"
    log:       "{{ log_level }}"
    force:     "{{ force }}"
    action: ibmsecurity.isam.base.lmi.get
  check_mode: no
  register: ret_obj

- name: Extract LMI Restart Timestamp
  set_fact:
    old_start_time: "{{ ret_obj.data[0].start_time }}"
  when: not ansible_check_mode

- name: Commit Changes and Restart LMI
  ibm.isam.isam:
    appliance: "{{ inventory_hostname }}"
    username:  "{{ username }}"
    password:  "{{ password }}"
    lmi_port:  "{{ lmi_port }}"
    log:       "{{ log_level }}"
    force:     "{{ force }}"
    action: ibmsecurity.isam.appliance.commit_and_restart
  when: not ansible_check_mode

- name: Wait for 1 minute
  pause:
      minutes: 1
  when: not ansible_check_mode

- name: Wait for LMI to Respond
  ibm.isam.isam:
      appliance: "{{ inventory_hostname }}"
      username: "{{ username }}"
      password: "{{ password }}"
      action: ibmsecurity.isam.base.lmi.await_startup
      isamapi:
          start_time: "{{ old_start_time }}"
          wait_time: "{{ start_config_wait_time }}"
  retries: 5
  delay: 30
  ignore_errors: true
  when: not ansible_check_mode

- name: Fail Appliance if Running in Check Mode
  fail:
    msg: Appliance does not have First Steps Executed. No task will run successfully so failing.
  when: ansible_check_mode
